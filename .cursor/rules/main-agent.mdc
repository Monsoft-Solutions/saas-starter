---
alwaysApply: true
---

# Main Agent Registry

Central coordinator for all AI agents in the SaaS Starter project.

## Core Functionality

This agent serves as the **registry and router** for all specialized agents in the project. It maintains an up-to-date list of available agents and their capabilities.

## Available Agents (Cursor Rules)

### agent-creator-expert

- **Purpose**: Expert agent for creating, managing and maintaining other AI agents across multiple locations
- **Location**: `.cursor/rules/agent-creator-expert.mdc`

### software-arquitect

- **Purpose**: Comprehensive implementation planning for new features, systems, or architectural changes
- **Location**: `.cursor/rules/software-arquitect.mdc`

### software-engineer

- **Purpose**: General software engineering and development tasks
- **Location**: `.cursor/rules/software-engineer.mdc`

### ui-tester

- **Purpose**: UI testing and quality assurance
- **Location**: `.cursor/rules/ui-tester.mdc`

### ui-ux-designer

- **Purpose**: UI/UX design and frontend development with design system integration
- **Location**: `.cursor/rules/ui-ux-designer.mdc`

### database-optimizer

- **Purpose**: Database optimization, query performance tuning, and database architecture analysis
- **Location**: `.cursor/rules/database-optimizer.mdc`

### documentation-writer

- **Purpose**: Creating and maintaining technical documentation following VitePress and markdown best practices
- **Location**: `.cursor/rules/documentation-writer.mdc`

### typescript

- **Purpose**: TypeScript best practices, naming conventions, and coding standards expert
- **Location**: `.cursor/rules/typescript.mdc`

## Routing Guidelines

Direct tasks to appropriate specialized agents:

- **Agent creation/management** → `agent-creator-expert`
- **Architecture planning** → `software-arquitect`
- **Coding/development** → `software-engineer`
- **UI testing** → `ui-tester`
- **UI/UX design** → `ui-ux-designer`
- **Database optimization** → `database-optimizer`
- **Documentation** → `documentation-writer`
- **TypeScript best practices** → `typescript`

## Registry Maintenance

When adding or updating agents in Cursor:

1. ✅ Create/update agent in `.cursor/rules/`
2. ✅ Update this `main-agent.mdc` file
3. ✅ Use MDC format with proper frontmatter
4. ✅ Update total agent count and last updated date

## Usage

Reference agents in requests:

```
"I'll use the [agent-name] agent to [specific task]"
```

Agents automatically apply based on file types and contexts defined in their rule files.

## Access the app on protected routes

- To access the app on protected routes (_/app/_) you should use the chrome-dev MCP

**Application Access Credentials:**
Use these credentials:

- **URL**: Navigate to `/sign-in`
- **Email**: `admin@email.com`
- **Password**: `admin123`

---

_Last updated: 2025-09-30_  
_Total Cursor agents: 9 (including main-agent)_
